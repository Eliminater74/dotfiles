#+TITLE: Emacs Configuration
#+AUTHOR: Andrea Feletto
#+EMAIL: andrea@andreafeletto.com

* Package Management
Automatically install packages if not already present on the system.
#+begin_src emacs-lisp :exports code
  (require 'use-package-ensure)
  (setq use-package-always-ensure t)
#+end_src
Update packages automatically.
#+begin_src emacs-lisp
  (use-package auto-package-update
    :config
    (setq auto-package-update-delete-old-versions t)
    (setq auto-package-update-hide-results t)
    (auto-package-update-maybe))
#+end_src
Install =try= to test packages without installing them.
#+begin_src emacs-lisp
  (use-package try)
#+end_src
* Evil Mode
Enable evil mode.
#+begin_src emacs-lisp
  (use-package evil
    :config
    (evil-mode 1))
#+end_src
Enable =surround= everywhere.
#+begin_src emacs-lisp
  (use-package evil-surround
    :config
    (global-evil-surround-mode 1))
#+end_src
Use =evil= with Org agendas.
#+begin_src emacs-lisp
  (use-package evil-org
    :after org
    :config
    (add-hook 'org-mode-hook 'evil-org-mode)
    (add-hook 'evil-org-mode-hook
      (lambda () (evil-org-set-key-theme)))
    (require 'evil-org-agenda)
    (evil-org-agenda-set-keys))
#+end_src
* User Interface
** Font
#+begin_src emacs-lisp
  (set-face-attribute 'default nil :height 140)
#+end_src
** Disable GUI Elements
#+begin_src emacs-lisp
  (tool-bar-mode 0)
  (menu-bar-mode 0)
  (scroll-bar-mode -1)
  (set-window-scroll-bars (minibuffer-window) nil nil)
#+end_src
** Line Numbers
#+begin_src emacs-lisp
  (global-display-line-numbers-mode)
#+end_src
** Greek Lambdas
#+begin_src emacs-lisp
  (global-prettify-symbols-mode t)
#+end_src
** Theme
Loading =dracula-theme= according to the [[https://github.com/tarsius/moody][moody]] documentation.
#+begin_src emacs-lisp
  (use-package dracula-theme
    :config
    (let ((line (face-attribute 'mode-line :underline)))
    (set-face-attribute 'mode-line          nil :overline   line)
    (set-face-attribute 'mode-line-inactive nil :overline   line)
    (set-face-attribute 'mode-line-inactive nil :underline  line)
    (set-face-attribute 'mode-line          nil :box        nil)
    (set-face-attribute 'mode-line-inactive nil :box        nil)
    (set-face-attribute 'mode-line-inactive nil :background "#000000")))
#+end_src
** Modeline
Setup =moody=, a ribbon-based modeline.
#+begin_src emacs-lisp
  (use-package moody
    :config
    (setq x-underline-at-descent-line t)
    (moody-replace-mode-line-buffer-identification)
    (moody-replace-vc-mode))
#+end_src
** Scroll Conservatively
Change scrolling behavior to only scroll as far as point goes.
#+begin_src emacs-lisp
  (setq scroll-conservatively 100)
#+end_src
** Highlight Current Line
=global-hl-line-mode= softly highlights the background color of the line
containing point. It makes it a bit easier to find point, and it's useful when
pairing or presenting code.
#+begin_src emacs-lisp
  (global-hl-line-mode)
#+end_src
* Software Development
** General
Tabs displayed as 4 characters by default.
#+begin_src emacs-lisp
  (setq-default tab-width 4)
#+end_src
Setup =dumbo-jump= for automatic jump to definition.
#+begin_src emacs-lisp
  (use-package dumb-jump
    :after magit
    :config
    (define-key evil-normal-state-map (kbd "M-.") 'dumb-jump-go)
    (add-hook 'magit-post-refresh-hook 'diff-hl-magit-post-refresh))
#+end_src
Highlight changes dinamically.
#+begin_src emacs-lisp
  (use-package diff-hl
    :config
    (global-diff-hl-mode)
    (diff-hl-flydiff-mode))
#+end_src
** Lisps
Color-matching parenthesis.
#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :config
    (add-hook 'emacs-lisp-mode-hook #'rainbow-delimiters-mode))
#+end_src
Enable [[https://www.emacswiki.org/emacs/ElDoc][ElDoc]].
#+begin_src emacs-lisp
  (add-hook 'emacs-lisp-mode-hook 'eldoc-mode)
#+end_src
* Terminal
I use =multi-term= to manage my shell sessions. It's bound to =C-c t=.
#+begin_src emacs-lisp
  (use-package multi-term)
  (global-set-key (kbd "C-c t") 'multi-term)
#+end_src
I'd rather not use Evil in the terminal. It's not especially useful (I don't use
vi bindings in xterm) and it shadows useful keybindings (=C-d= for EOF, for
example).
#+begin_src emacs-lisp
  (evil-set-initial-state 'term-mode 'emacs)
#+end_src
I add a bunch of hooks to =term-mode=:
- I'd like links (URLs, etc) to be clickable.
- I bind =M-o= to quickly change windows. I'd like that in terminals, too.
#+begin_src emacs-lisp
  (add-hook 'term-mode-hook
    (lambda ()
      (goto-address-mode)
      (define-key term-raw-map (kbd "M-o") 'other-window)))
#+end_src
* Git
Always follow symlink to file under vc.
#+begin_src emacs-lisp
  (setq vc-follow-symlinks t)
#+end_src
Use =magit= to manage git repositories. Highlight commit text longer
than 50 characters.
#+begin_src emacs-lisp
  (use-package magit
    :bind
    ("C-x g" . magit-status)
    :config
    (setq git-commit-summary-max-length 50)
    (use-package evil-magit))
#+end_src
* Org
** Personal Info
#+begin_src emacs-lisp
  (setq
    user-full-name "Andrea Feletto"
    user-mail-address "andrea@andreafeletto.com")
#+end_src
** Emacs Startup
start emacs with in empty buffer in org-mode.
#+begin_src emacs-lisp
    (setq initial-major-mode 'org-mode)
    (setq inhibit-splash-screen t)
    (setq initial-scratch-message "")
#+end_src
** Indentation
Disable paragraph indentation.
#+begin_src emacs-lisp
    (setq org-adapt-indentation nil)
#+end_src
** Display preferences
Pretty bullets.
#+begin_src emacs-lisp
  (use-package org-bullets
    :init
    (add-hook 'org-mode-hook 'org-bullets-mode))
#+end_src
Change string displayed after heading when folded.
#+begin_src emacs-lisp
  (setq org-ellipsis "â¤µ")
#+end_src
Use syntax highlighting in source blocks while editing.
#+begin_src emacs-lisp
  (setq org-src-fontify-natively t)
#+end_src
Make TAB act as if it were issued in a buffer of the language's major mode.
#+begin_src emacs-lisp
  (setq org-src-tab-acts-natively t)
#+end_src
When editing a code snippet, use the current window rather than popping open a
new one (which shows the same information).
#+begin_src emacs-lisp
  (setq org-src-window-setup 'current-window)
#+end_src
** Exporting
Don't ask before evaluating code blocks.
#+begin_src emacs-lisp
  (setq org-confirm-babel-evaluate nil)
#+end_src
Translate quotes to typographically-correct curly quotes when exporting.
#+begin_src emacs-lisp
  (setq org-export-with-smart-quotes t)
#+end_src
** LaTeX
Enable code highlighting with minted.
#+begin_src emacs-lisp
  (require 'ox-latex)
  (setq org-latex-listings 'minted)
  (add-to-list 'org-latex-packages-alist '("newfloat" "minted"))
  (setq org-latex-pdf-process
    '("%latex -interaction nonstopmode -output-directory %o -shell-escape %f"
      "%latex -interaction nonstopmode -output-directory %o -shell-escape %f"))
#+end_src
Table of content in its own page.
#+begin_src emacs-lisp
  (setq org-latex-toc-command "\\newpage\n\\tableofcontents\n\\newpage\n")
#+end_src
** Reveal.js
#+begin_src emacs-lisp
  (use-package ox-reveal
    :config
    (setq org-reveal-root "https://cdn.jsdelivr.net/npm/reveal.js"))
#+end_src
** =org-drill=
#+begin_src emacs-lisp
  (use-package org-drill
    :config
    (add-to-list 'org-modules 'org-drill))
#+end_src
* Plain Text
** Editing with Markdown
Use github-flavored markdown by default ad use pandoc for compilation.
#+begin_src emacs-lisp
  (use-package markdown-mode
    :commands gfm-mode
    :mode
    (("\\.md$" . gfm-mode))
    :config
    (setq markdown-command "pandoc --standalone --mathjax --from=markdown"))
#+end_src
** Wrap paragraphs automatically
=AutoFillMode= automatically wraps paragraphs, kinda like hitting =M-q=. I wrap
a lot of paragraphs, so this automatically wraps 'em when I'm writing text,
Markdown, or Org.
#+begin_src emacs-lisp
  (add-hook 'text-mode-hook 'auto-fill-mode)
  (add-hook 'gfm-mode-hook 'auto-fill-mode)
  (add-hook 'org-mode-hook 'auto-fill-mode)
#+end_src
** Quickly explore my "notes" directory with =deft=
#+begin_src emacs-lisp
  (use-package deft
    :bind ("C-c n" . deft)
    :commands deft
    :config
    (setq deft-directory "~/documents/notes"
          deft-recursive t)
    (evil-define-key 'normal deft-mode-map (kbd "dd") 'deft-delete-file))
#+end_src
* File Management
Kill buffers of files/directories that are deleted in =dired=.
#+begin_src emacs-lisp
  (setq dired-clean-up-buffers-too t)
#+end_src
Always copy directories recursively instead of asking every time.
#+begin_src emacs-lisp
  (setq dired-recursive-copies 'always)
#+end_src
Ask before recursively /deleting/ a directory, though.
#+begin_src emacs-lisp
  (setq dired-recursive-deletes 'top)
#+end_src
Use =emacs-async= to make =dired= perform actions asynchronously.
#+begin_src emacs-lisp
  (use-package async
    :config
    (dired-async-mode 1))
#+end_src
Use "j" and "k" to move around in =dired=.
#+begin_src emacs-lisp
  (evil-define-key 'normal dired-mode-map (kbd "j") 'dired-next-line)
  (evil-define-key 'normal dired-mode-map (kbd "k") 'dired-previous-line)
#+end_src
* Editor Settings
** Visit Emacs Configuration
#+begin_src emacs-lisp
  (defun visit-emacs-config ()
    (interactive)
    (find-file "~/.emacs.d/configuration.org"))

  (global-set-key (kbd "C-c e") 'visit-emacs-config)
#+end_src
** Undo Tree
#+begin_src emacs-lisp
  (use-package undo-tree)
#+end_src
** Help
The =helpful= package provides more context in Help buffers.
#+begin_src emacs-lisp
  (use-package helpful
    :config
    (global-set-key (kbd "C-h f") #'helpful-callable)
    (global-set-key (kbd "C-h v") #'helpful-variable)
    (global-set-key (kbd "C-h k") #'helpful-key)
    (evil-define-key 'normal helpful-mode-map (kbd "q") 'quit-window))
#+end_src
** Indentation
Always indent with spaces.
#+begin_src emacs-lisp
  (setq-default indent-tabs-mode nil)
#+end_src
** Backups
Set sensible backup folder.
#+begin_src emacs-lisp
  (setq backup-by-copying t)
  (setq backup-directory-alist '(("." . "~/.cache/emacs")))
#+end_src
Multiple backups.
#+begin_src emacs-lisp
  (setq delete-old-versions t
    kept-new-versions 6
    kept-old-versions 2
    version-control t)
#+end_src
** Browser Interaction
Enable [[https://github.com/hrs/engine-mode][engine-mode]] and define a few useful engines.
#+begin_src emacs-lisp
  (use-package engine-mode
    :config
    (engine-mode t)
    (engine/set-keymap-prefix (kbd "C-c s"))
    (defengine duckduckgo "https://duckduckgo.com/?q=%s"
      :keybinding "d")
    (defengine github "https://github.com/search?ref=simplesearch&q=%s"
      :keybinding "g")
    (defengine stack-overflow "https://stackoverflow.com/search?q=%s"
      :keybinding "s")
    (defengine wikipedia "http://www.wikipedia.org/search-redirect.php?language=en&go=Go&search=%s"
      :keybinding "w")
    (defengine youtube "https://www.youtube.com/results?search_query=%s"
      :keybinding "y"))
#+end_src
** Other
Lorem Ipsum
#+begin_src emacs-lisp
  (use-package lorem-ipsum)
#+end_src
