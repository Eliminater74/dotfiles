#!/bin/sh

Version='0.1.0'
PrgName=${0##*/}

GitUrl='https://github.com/andreafeletto'
GitDir="$HOME/repos"

ConfigDir=${XDG_CONFIG_HOME:-$HOME/.config}

Usage() {
	while read -r Line; do
		printf '%b\n' "$Line"
	done <<-EOF
		\rUsage: $PrgName OPTION...
		\rInstall dotfiles and programs.

		\rOptions:
		\r  -h, --help, -?              display this help
		\r  -v, --version               output version information

		\r  -s, --stow                  stow directories listed in ./tostow
		\r  -g, --git                   install from a git remote
		\r  -p, --pacman                install from ABR and AUR
		\r  --all                       install from all sources and stow

		\rFiles:
		\r  packages                    ABR and AUR packages
		\r  services                    systemd services to enable
		\r  tostow                      directories to stow
	EOF
}

Die() {
	printf 'error: %s\n' "${1:-generic}" >&2
	exit "${2:-1}"
}

Warn() {
	printf 'warning: %s\n' "${1:-generic}" >&2
}

Title() {
	printf '\n\033[0;31m%s\033[0m\n\n' "$1"
}

StowDirs() {
    Paths=$(while read -r S; do find "$S" -mindepth 1 -type d; done < tostow)
    for P in $Paths; do
        mkdir -p "$HOME/${P#*/}"
    done
}

ExtraDirs() {
    if [ -r directories ]; then
        grep -v '^$\|^#' directories | while read -r Dir; do
            mkdir -p "$HOME/$Dir"
        done
    fi
}

Stow=''
Git=''
Pacman=''

while [ -n "$1" ]; do
    case $1 in
        --help|-h|-\?)
            Usage; exit 0 ;;
        --version|-v)
            printf '%s\n' "$Version"; exit 0 ;;
		-s|--stow)
			Stow='true' ;;
        -g|--git)
            Git='true' ;;
        -p|--pacman)
            Pacman='true' ;;
        --all)
            Stow='true'; Git='true'; Pacman='true' ;;
        *)
            Die "invalid option: \"$1\"" ;;
    esac
    shift
done

if [ -n "$Stow" ]; then
	Title 'Stowing'
    StowDirs
    ExtraDirs
	rm -f "$ConfigDir/user-dirs.dirs"
	xargs -a tostow stow
    printf 'done stowing.\n'
fi

if [ -n "$Git" ]; then
    Title 'Installing from Git'
    mkdir -p "$GitDir" 
    while read -r Repo; do
        Dir="$GitDir/$Repo"
        if [ -d "$Dir" ]; then
			Warn "$Repo already cloned. skipping."
			continue
        fi
        git clone -q "$GitUrl/$Repo.git" "$Dir"
        sudo make --directory="$Dir" install clean
    done < gitrepos
fi

if [ -n "$Pacman" ]; then
    Title 'Installing ABR and AUR Packages'
    grep -v '^$\|^#' packages | yay -Syu --needed \
        --answerclean None \
        --answerdiff None \
        --answerupgrade ''
fi

