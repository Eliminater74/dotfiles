#!/bin/sh

Version='0.0.1'
PrgName=${0##*/}

PrgDir="$HOME/.local/share/$PrgName"
mkdir -p "$PrgDir"
PidPath="$PrgDir/$PrgName.pid"
LogPath="$PrgDir/$PrgName.log"

Usage() {
	while read -r Line; do
		printf '%b\n' "$Line"
	done <<-EOF
		\rUsage: $PrgName OPTION
		\rStatusbar for dwm.

		\rOptions:
		\r	-h, --help, -?		display this help and exit
		\r  -v, --version		output version infromation
		\r  -r, --refresh		refresh
		\r  -d, --daemon		start in the background (if not already running)
		\r  -s, --stop			stop daemon if one exists

		\rGit repository: <https://github.com/andreafeletto/dotfiles>
	EOF
}

Die() {
	printf '%s\n' "$1" 1>&2
	Usage
	exit 1
}

################################################################################
##																			  ##
## Status Bar Elements														  ##
##																			  ##
################################################################################

Battery() {
	CapacityPath='/sys/class/power_supply/BAT1/capacity'
	StatusPath='/sys/class/power_supply/BAT1/status'
	if [ -r "$CapacityPath" ] && [ -r "$StatusPath" ]; then
		read -r Status < "$StatusPath"
		case $Status in
			Discharging)
				Icon="🔋";;
			Charging)
				Icon="🔌";;
			Full)
				Icon="⚡";;
			Unknown)
				Icon="❓";;
		esac
		read -r Capacity < "$CapacityPath"
		printf '%s %5s\n' "$Icon" "$Capacity"
	else
		Die 'Error: Unable to access power supply files'
	fi
}

Volume() {
	if ! command -v pulsemixer > /dev/null; then
		Die 'Missing Dependency: pulsemixer'
	fi

    if [ "$(pulsemixer --get-mute)" -eq 1 ]; then
        printf '   🔇   \n'
    else
		Value=$(pulsemixer --get-volume)
        printf '🔊 %4s%%\n' "${Value%% *}"
    fi
}

Backlight() {
	Value=$(xbacklight)
    printf '💡 %4b%%\n' "${Value%%.*}"
}

Clock() {
	if command -v lolclock > /dev/null; then
		lolclock
	else
		date '+%R'
	fi
}

################################################################################
##																			  ##
## Utility Functions														  ##
##																			  ##
################################################################################

Refresh() {
    printf '%s' "$$" > "$PidPath"
    xsetroot -name "| $(Backlight) | $(Volume) | $(Battery) | $(Clock)"
}

GetDaemonPid() {
	if [ -r "$PidPath" ]; then
		read -r Pid < "$PidPath"
		printf '%s' "$Pid"
	fi
}

SendRefresh() {
	kill -USR1 "$(GetDaemonPid)"
}

StartDaemon() {
	if kill -0 "$(GetDaemonPid)" 2> /dev/null; then
		Die 'Error: Daemon already running'
	fi
	${SHELL:-"/bin/sh"} -c "$0" >> "$LogPath" 2>&1 &
}

StopDaemon() {
	Pid=$(GetDaemonPid)
	if ! kill -0 "$Pid"; then
		Die 'Error: No daemon to kill'
	fi
	kill -15 "$Pid"
}

################################################################################
##																			  ##
## Argument Parsing															  ##
##																			  ##
################################################################################

if [ $# -gt 1 ]; then
	Usage
	exit 1
fi

case $1 in
	--help|-h|-\?)
		Usage; exit 0 ;;
	--version|-v)
		printf '%s\n' "$Version"; exit 0 ;;
	--refresh|-r)
		SendRefresh; exit 0 ;;
	--daemon|-d)
		StartDaemon; exit 0 ;;
	--stop|-s)
		StopDaemon; exit 0 ;;
esac

################################################################################
##																			  ##
## Main Loop and Traps														  ##
##																			  ##
################################################################################

trap 'Refresh' USR1
trap 'rm $PidPath; exit 0' INT TERM

while true; do
    Refresh
    sleep 10 & wait $!
done

